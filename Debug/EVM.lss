
EVM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000d28  2**0
                  ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000d28  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000054  00000000  00000000  00000d57  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000dab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bb9  00000000  00000000  00000ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a76  00000000  00000000  00003a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d81  00000000  00000000  000044fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  0000527c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ac  00000000  00000000  000054dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000102d  00000000  00000000  00005788  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000067b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000c86  00000c86  00000d1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006888  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.App_Init 0000002c  00000bd0  00000bd0  00000c64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .progmemx.data 00000026  000000ae  000000ae  00000142  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 17 .text.LCD_Page 000000e8  000005ec  000005ec  00000680  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.Main_Task 0000014c  000002a4  000002a4  00000338  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.App_main 0000000c  00000c66  00000c66  00000cfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss.D_Counter 00000001  00800064  00800064  00000d28  2**0
                  ALLOC
 21 .bss.C_Counter 00000001  00800065  00800065  00000d28  2**0
                  ALLOC
 22 .bss.B_Counter 00000001  00800066  00800066  00000d28  2**0
                  ALLOC
 23 .bss.A_Counter 00000001  00800067  00800067  00000d28  2**0
                  ALLOC
 24 .text.BTN_Initialization 0000000a  00000c72  00000c72  00000d06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.BTN_pressed 0000007c  0000091e  0000091e  000009b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.LCD_Write_Command 000000d4  000006d4  000006d4  00000768  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.LCD_Initialize 0000007c  0000099a  0000099a  00000a2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.LCD_Write_Character 000000d4  000007a8  000007a8  0000083c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.LCD_Write_String 0000002e  00000ba2  00000ba2  00000c36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.LCD_Write_Number 000001d0  000000d4  000000d4  00000168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.LCD_LINE_position 00000048  00000aec  00000aec  00000b80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.main    0000000a  00000c7c  00000c7c  00000d10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.DIO_SetPin_Direction 000000fe  000003f0  000003f0  00000484  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.DIO_SetPin_Value 000000fe  000004ee  000004ee  00000582  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.DIO_GetPin_Value 00000074  00000a16  00000a16  00000aaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.libgcc.div 00000062  00000a8a  00000a8a  00000b1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.libgcc.div 0000001c  00000c1c  00000c1c  00000cb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.libgcc.div 000000a2  0000087c  0000087c  00000910  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.libgcc  00000020  00000bfc  00000bfc  00000c90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.libgcc.prologue 00000038  00000b34  00000b34  00000bc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.libgcc.prologue 00000036  00000b6c  00000b6c  00000c00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.libgcc  00000018  00000c38  00000c38  00000ccc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.__dummy_fini 00000002  00000c8e  00000c8e  00000d22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.__dummy_funcs_on_exit 00000002  00000c90  00000c90  00000d24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.__dummy_simulator_exit 00000002  00000c92  00000c92  00000d26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.exit    00000016  00000c50  00000c50  00000ce4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text._Exit   00000004  00000c8a  00000c8a  00000d1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__bad_interrupt>
   8:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__bad_interrupt>
   c:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__bad_interrupt>
  10:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__bad_interrupt>
  14:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__bad_interrupt>
  18:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__bad_interrupt>
  1c:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__bad_interrupt>
  20:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__bad_interrupt>
  24:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__bad_interrupt>
  28:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__bad_interrupt>
  2c:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__bad_interrupt>
  30:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__bad_interrupt>
  34:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__bad_interrupt>
  38:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__bad_interrupt>
  3c:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__bad_interrupt>
  40:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__bad_interrupt>
  44:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__bad_interrupt>
  48:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__bad_interrupt>
  4c:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__bad_interrupt>
  50:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 68       	ori	r16, 0x80	; 128
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 3e 06 	call	0xc7c	; 0xc7c <main>
  a6:	0c 94 28 06 	jmp	0xc50	; 0xc50 <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

00000c86 <__bad_interrupt>:
 c86:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.App_Init:

00000bd0 <App_Init>:
bool PINB_State;
bool PINC_State;
bool PIND_State;

State_Error App_Init(void){
	LCD_Initialize();
 bd0:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_Initialize>
	BTN_Initialization(DIO_PORTD,A_PIN); // for A
 bd4:	63 e0       	ldi	r22, 0x03	; 3
 bd6:	83 e0       	ldi	r24, 0x03	; 3
 bd8:	0e 94 39 06 	call	0xc72	; 0xc72 <BTN_Initialization>
	BTN_Initialization(DIO_PORTD,B_PIN); // for B
 bdc:	65 e0       	ldi	r22, 0x05	; 5
 bde:	83 e0       	ldi	r24, 0x03	; 3
 be0:	0e 94 39 06 	call	0xc72	; 0xc72 <BTN_Initialization>
	BTN_Initialization(DIO_PORTD,C_PIN); // for C
 be4:	66 e0       	ldi	r22, 0x06	; 6
 be6:	83 e0       	ldi	r24, 0x03	; 3
 be8:	0e 94 39 06 	call	0xc72	; 0xc72 <BTN_Initialization>
	BTN_Initialization(DIO_PORTD,D_PIN); // for D
 bec:	67 e0       	ldi	r22, 0x07	; 7
 bee:	83 e0       	ldi	r24, 0x03	; 3
 bf0:	0e 94 39 06 	call	0xc72	; 0xc72 <BTN_Initialization>
	LCD_Initialize();
 bf4:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_Initialize>
	return State_SUCCESS;
}
 bf8:	81 e0       	ldi	r24, 0x01	; 1
 bfa:	08 95       	ret

Disassembly of section .text.LCD_Page:

000005ec <LCD_Page>:
	Main_Task();
	return Local_Error;
}

State_Error LCD_Page(void){
	LCD_LINE_position(LCD_LINE1,1);
 5ec:	61 e0       	ldi	r22, 0x01	; 1
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_LINE_position>
	LCD_Write_String("Electronic Voting");
 5f4:	6e ea       	ldi	r22, 0xAE	; 174
 5f6:	70 e0       	ldi	r23, 0x00	; 0
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	0e 94 d1 05 	call	0xba2	; 0xba2 <LCD_Write_String>
	LCD_LINE_position(LCD_LINE2,6);
 5fe:	66 e0       	ldi	r22, 0x06	; 6
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_LINE_position>
	LCD_Write_String("Machine");
 606:	60 ec       	ldi	r22, 0xC0	; 192
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	0e 94 d1 05 	call	0xba2	; 0xba2 <LCD_Write_String>
	LCD_LINE_position(LCD_LINE3,1);
 610:	61 e0       	ldi	r22, 0x01	; 1
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_LINE_position>
	LCD_Write_String("A=");
 618:	68 ec       	ldi	r22, 0xC8	; 200
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	0e 94 d1 05 	call	0xba2	; 0xba2 <LCD_Write_String>
	LCD_LINE_position(LCD_LINE3,3);
 622:	63 e0       	ldi	r22, 0x03	; 3
 624:	82 e0       	ldi	r24, 0x02	; 2
 626:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_LINE_position>
	LCD_Write_Number(A_Counter);
 62a:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <A_Counter>
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	40 e0       	ldi	r20, 0x00	; 0
 632:	50 e0       	ldi	r21, 0x00	; 0
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_Write_Number>
	LCD_LINE_position(LCD_LINE3,10);
 640:	6a e0       	ldi	r22, 0x0A	; 10
 642:	82 e0       	ldi	r24, 0x02	; 2
 644:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_LINE_position>
	LCD_Write_String("B=");	
 648:	6b ec       	ldi	r22, 0xCB	; 203
 64a:	70 e0       	ldi	r23, 0x00	; 0
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	0e 94 d1 05 	call	0xba2	; 0xba2 <LCD_Write_String>
	LCD_LINE_position(LCD_LINE3,12);
 652:	6c e0       	ldi	r22, 0x0C	; 12
 654:	82 e0       	ldi	r24, 0x02	; 2
 656:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_LINE_position>
	LCD_Write_Number(B_Counter);
 65a:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <B_Counter>
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	40 e0       	ldi	r20, 0x00	; 0
 662:	50 e0       	ldi	r21, 0x00	; 0
 664:	60 e0       	ldi	r22, 0x00	; 0
 666:	70 e0       	ldi	r23, 0x00	; 0
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_Write_Number>
	LCD_LINE_position(LCD_LINE4,1);
 670:	61 e0       	ldi	r22, 0x01	; 1
 672:	83 e0       	ldi	r24, 0x03	; 3
 674:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_LINE_position>
	LCD_Write_String("C=");
 678:	6e ec       	ldi	r22, 0xCE	; 206
 67a:	70 e0       	ldi	r23, 0x00	; 0
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	0e 94 d1 05 	call	0xba2	; 0xba2 <LCD_Write_String>
	LCD_LINE_position(LCD_LINE4,3);
 682:	63 e0       	ldi	r22, 0x03	; 3
 684:	83 e0       	ldi	r24, 0x03	; 3
 686:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_LINE_position>
	LCD_Write_Number(C_Counter);
 68a:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <C_Counter>
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	40 e0       	ldi	r20, 0x00	; 0
 692:	50 e0       	ldi	r21, 0x00	; 0
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	70 e0       	ldi	r23, 0x00	; 0
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_Write_Number>
	LCD_LINE_position(LCD_LINE4,10);
 6a0:	6a e0       	ldi	r22, 0x0A	; 10
 6a2:	83 e0       	ldi	r24, 0x03	; 3
 6a4:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_LINE_position>
	LCD_Write_String("D=");
 6a8:	61 ed       	ldi	r22, 0xD1	; 209
 6aa:	70 e0       	ldi	r23, 0x00	; 0
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	0e 94 d1 05 	call	0xba2	; 0xba2 <LCD_Write_String>
	LCD_LINE_position(LCD_LINE4,12);
 6b2:	6c e0       	ldi	r22, 0x0C	; 12
 6b4:	83 e0       	ldi	r24, 0x03	; 3
 6b6:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_LINE_position>
	LCD_Write_Number(D_Counter);
 6ba:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <_end>
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	40 e0       	ldi	r20, 0x00	; 0
 6c2:	50 e0       	ldi	r21, 0x00	; 0
 6c4:	60 e0       	ldi	r22, 0x00	; 0
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_Write_Number>
	return State_SUCCESS;
}
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	08 95       	ret

Disassembly of section .text.Main_Task:

000002a4 <Main_Task>:
State_Error Main_Task(void){
	State_Error Local_Error=State_SUCCESS;
		BTN_pressed(DIO_PORTD,A_PIN,&PINA_State);
 2a4:	43 e6       	ldi	r20, 0x63	; 99
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	63 e0       	ldi	r22, 0x03	; 3
 2aa:	83 e0       	ldi	r24, 0x03	; 3
 2ac:	0e 94 8f 04 	call	0x91e	; 0x91e <BTN_pressed>
		BTN_pressed(DIO_PORTD,B_PIN,&PINB_State);
 2b0:	40 e6       	ldi	r20, 0x60	; 96
 2b2:	50 e0       	ldi	r21, 0x00	; 0
 2b4:	65 e0       	ldi	r22, 0x05	; 5
 2b6:	83 e0       	ldi	r24, 0x03	; 3
 2b8:	0e 94 8f 04 	call	0x91e	; 0x91e <BTN_pressed>
		BTN_pressed(DIO_PORTD,C_PIN,&PINC_State);
 2bc:	42 e6       	ldi	r20, 0x62	; 98
 2be:	50 e0       	ldi	r21, 0x00	; 0
 2c0:	66 e0       	ldi	r22, 0x06	; 6
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	0e 94 8f 04 	call	0x91e	; 0x91e <BTN_pressed>
		BTN_pressed(DIO_PORTD,D_PIN,&PIND_State);
 2c8:	41 e6       	ldi	r20, 0x61	; 97
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	67 e0       	ldi	r22, 0x07	; 7
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	0e 94 8f 04 	call	0x91e	; 0x91e <BTN_pressed>
    if(PINA_State==HIGH){
 2d4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <PINA_State>
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	f9 f4       	brne	.+62     	; 0x31a <Main_Task+0x76>
		A_Counter++;
 2dc:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <A_Counter>
 2e0:	8f 5f       	subi	r24, 0xFF	; 255
 2e2:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <A_Counter>
		LCD_LINE_position(LCD_LINE3,3);
 2e6:	63 e0       	ldi	r22, 0x03	; 3
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_LINE_position>
		LCD_Write_Number(A_Counter);
 2ee:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <A_Counter>
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	40 e0       	ldi	r20, 0x00	; 0
 2f6:	50 e0       	ldi	r21, 0x00	; 0
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_Write_Number>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 304:	2f ef       	ldi	r18, 0xFF	; 255
 306:	83 ed       	ldi	r24, 0xD3	; 211
 308:	90 e3       	ldi	r25, 0x30	; 48
 30a:	21 50       	subi	r18, 0x01	; 1
 30c:	80 40       	sbci	r24, 0x00	; 0
 30e:	90 40       	sbci	r25, 0x00	; 0
 310:	e1 f7       	brne	.-8      	; 0x30a <Main_Task+0x66>
 312:	00 c0       	rjmp	.+0      	; 0x314 <Main_Task+0x70>
 314:	00 00       	nop
	LCD_LINE_position(LCD_LINE4,12);
	LCD_Write_Number(D_Counter);
	return State_SUCCESS;
}
State_Error Main_Task(void){
	State_Error Local_Error=State_SUCCESS;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	08 95       	ret
		A_Counter++;
		LCD_LINE_position(LCD_LINE3,3);
		LCD_Write_Number(A_Counter);
		_delay_ms(1000);
	}
	else if(PINB_State==HIGH){
 31a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	f9 f4       	brne	.+62     	; 0x360 <Main_Task+0xbc>
		B_Counter++;
 322:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <B_Counter>
 326:	8f 5f       	subi	r24, 0xFF	; 255
 328:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <B_Counter>
		LCD_LINE_position(LCD_LINE3,12);
 32c:	6c e0       	ldi	r22, 0x0C	; 12
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_LINE_position>
		LCD_Write_Number(B_Counter);	
 334:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <B_Counter>
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	40 e0       	ldi	r20, 0x00	; 0
 33c:	50 e0       	ldi	r21, 0x00	; 0
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_Write_Number>
 34a:	2f ef       	ldi	r18, 0xFF	; 255
 34c:	83 ed       	ldi	r24, 0xD3	; 211
 34e:	90 e3       	ldi	r25, 0x30	; 48
 350:	21 50       	subi	r18, 0x01	; 1
 352:	80 40       	sbci	r24, 0x00	; 0
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <Main_Task+0xac>
 358:	00 c0       	rjmp	.+0      	; 0x35a <Main_Task+0xb6>
 35a:	00 00       	nop
	LCD_LINE_position(LCD_LINE4,12);
	LCD_Write_Number(D_Counter);
	return State_SUCCESS;
}
State_Error Main_Task(void){
	State_Error Local_Error=State_SUCCESS;
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	08 95       	ret
		B_Counter++;
		LCD_LINE_position(LCD_LINE3,12);
		LCD_Write_Number(B_Counter);	
		_delay_ms(1000);
	}
	else if(PINC_State==HIGH){
 360:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <PINC_State>
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	f9 f4       	brne	.+62     	; 0x3a6 <Main_Task+0x102>
		C_Counter++;
 368:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <C_Counter>
 36c:	8f 5f       	subi	r24, 0xFF	; 255
 36e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <C_Counter>
		LCD_LINE_position(LCD_LINE4,3);
 372:	63 e0       	ldi	r22, 0x03	; 3
 374:	83 e0       	ldi	r24, 0x03	; 3
 376:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_LINE_position>
		LCD_Write_Number(C_Counter);
 37a:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <C_Counter>
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	50 e0       	ldi	r21, 0x00	; 0
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_Write_Number>
 390:	2f ef       	ldi	r18, 0xFF	; 255
 392:	83 ed       	ldi	r24, 0xD3	; 211
 394:	90 e3       	ldi	r25, 0x30	; 48
 396:	21 50       	subi	r18, 0x01	; 1
 398:	80 40       	sbci	r24, 0x00	; 0
 39a:	90 40       	sbci	r25, 0x00	; 0
 39c:	e1 f7       	brne	.-8      	; 0x396 <Main_Task+0xf2>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <Main_Task+0xfc>
 3a0:	00 00       	nop
	LCD_LINE_position(LCD_LINE4,12);
	LCD_Write_Number(D_Counter);
	return State_SUCCESS;
}
State_Error Main_Task(void){
	State_Error Local_Error=State_SUCCESS;
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	08 95       	ret
		C_Counter++;
		LCD_LINE_position(LCD_LINE4,3);
		LCD_Write_Number(C_Counter);
			_delay_ms(1000);
	}
	else if(PIND_State==HIGH){
 3a6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <PIND_State>
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	f9 f4       	brne	.+62     	; 0x3ec <Main_Task+0x148>
		D_Counter++;
 3ae:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_end>
 3b2:	8f 5f       	subi	r24, 0xFF	; 255
 3b4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_end>
		LCD_LINE_position(LCD_LINE4,12);
 3b8:	6c e0       	ldi	r22, 0x0C	; 12
 3ba:	83 e0       	ldi	r24, 0x03	; 3
 3bc:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_LINE_position>
		LCD_Write_Number(D_Counter);		
 3c0:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <_end>
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_Write_Number>
 3d6:	2f ef       	ldi	r18, 0xFF	; 255
 3d8:	83 ed       	ldi	r24, 0xD3	; 211
 3da:	90 e3       	ldi	r25, 0x30	; 48
 3dc:	21 50       	subi	r18, 0x01	; 1
 3de:	80 40       	sbci	r24, 0x00	; 0
 3e0:	90 40       	sbci	r25, 0x00	; 0
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <Main_Task+0x138>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <Main_Task+0x142>
 3e6:	00 00       	nop
	LCD_LINE_position(LCD_LINE4,12);
	LCD_Write_Number(D_Counter);
	return State_SUCCESS;
}
State_Error Main_Task(void){
	State_Error Local_Error=State_SUCCESS;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	08 95       	ret
		D_Counter++;
		LCD_LINE_position(LCD_LINE4,12);
		LCD_Write_Number(D_Counter);		
		_delay_ms(1000);
	}else{
		Local_Error=State_FAIL;
 3ec:	80 e0       	ldi	r24, 0x00	; 0
	}
	return Local_Error;
 3ee:	08 95       	ret

Disassembly of section .text.App_main:

00000c66 <App_main>:
	LCD_Initialize();
	return State_SUCCESS;
}
State_Error App_main(void){
	State_Error Local_Error=State_SUCCESS;
    LCD_Page();
 c66:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_Page>
	Main_Task();
 c6a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <Main_Task>
	return Local_Error;
}
 c6e:	81 e0       	ldi	r24, 0x01	; 1
 c70:	08 95       	ret

Disassembly of section .text.BTN_Initialization:

00000c72 <BTN_Initialization>:
 c72:	40 e0       	ldi	r20, 0x00	; 0
 c74:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPin_Direction>
 c78:	81 e0       	ldi	r24, 0x01	; 1
 c7a:	08 95       	ret

Disassembly of section .text.BTN_pressed:

0000091e <BTN_pressed>:
 91e:	ef 92       	push	r14
 920:	ff 92       	push	r15
 922:	0f 93       	push	r16
 924:	1f 93       	push	r17
 926:	cf 93       	push	r28
 928:	df 93       	push	r29
 92a:	0f 92       	push	r0
 92c:	cd b7       	in	r28, 0x3d	; 61
 92e:	de b7       	in	r29, 0x3e	; 62
 930:	18 2f       	mov	r17, r24
 932:	06 2f       	mov	r16, r22
 934:	7a 01       	movw	r14, r20
 936:	ae 01       	movw	r20, r28
 938:	4f 5f       	subi	r20, 0xFF	; 255
 93a:	5f 4f       	sbci	r21, 0xFF	; 255
 93c:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_GetPin_Value>
 940:	80 e0       	ldi	r24, 0x00	; 0
 942:	08 c0       	rjmp	.+16     	; 0x954 <BTN_pressed+0x36>
 944:	ae 01       	movw	r20, r28
 946:	4f 5f       	subi	r20, 0xFF	; 255
 948:	5f 4f       	sbci	r21, 0xFF	; 255
 94a:	60 2f       	mov	r22, r16
 94c:	81 2f       	mov	r24, r17
 94e:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_GetPin_Value>
 952:	81 e0       	ldi	r24, 0x01	; 1
 954:	99 81       	ldd	r25, Y+1	; 0x01
 956:	99 23       	and	r25, r25
 958:	a9 f3       	breq	.-22     	; 0x944 <BTN_pressed+0x26>
 95a:	2f ef       	ldi	r18, 0xFF	; 255
 95c:	36 e7       	ldi	r19, 0x76	; 118
 95e:	91 e0       	ldi	r25, 0x01	; 1
 960:	21 50       	subi	r18, 0x01	; 1
 962:	30 40       	sbci	r19, 0x00	; 0
 964:	90 40       	sbci	r25, 0x00	; 0
 966:	e1 f7       	brne	.-8      	; 0x960 <BTN_pressed+0x42>
 968:	00 c0       	rjmp	.+0      	; 0x96a <BTN_pressed+0x4c>
 96a:	00 00       	nop
 96c:	08 c0       	rjmp	.+16     	; 0x97e <BTN_pressed+0x60>
 96e:	ae 01       	movw	r20, r28
 970:	4f 5f       	subi	r20, 0xFF	; 255
 972:	5f 4f       	sbci	r21, 0xFF	; 255
 974:	60 2f       	mov	r22, r16
 976:	81 2f       	mov	r24, r17
 978:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_GetPin_Value>
 97c:	81 e0       	ldi	r24, 0x01	; 1
 97e:	99 81       	ldd	r25, Y+1	; 0x01
 980:	99 23       	and	r25, r25
 982:	a9 f3       	breq	.-22     	; 0x96e <BTN_pressed+0x50>
 984:	f7 01       	movw	r30, r14
 986:	80 83       	st	Z, r24
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	0f 90       	pop	r0
 98c:	df 91       	pop	r29
 98e:	cf 91       	pop	r28
 990:	1f 91       	pop	r17
 992:	0f 91       	pop	r16
 994:	ff 90       	pop	r15
 996:	ef 90       	pop	r14
 998:	08 95       	ret

Disassembly of section .text.LCD_Write_Command:

000006d4 <LCD_Write_Command>:
ERROR_STATE LCD_Clear(void)
{
	ERROR_STATE state_error = SUCCESS;
	LCD_Write_Command(0x01);
	return state_error;
}
 6d4:	cf 93       	push	r28
 6d6:	c8 2f       	mov	r28, r24
 6d8:	48 2f       	mov	r20, r24
 6da:	44 1f       	adc	r20, r20
 6dc:	44 27       	eor	r20, r20
 6de:	44 1f       	adc	r20, r20
 6e0:	64 e0       	ldi	r22, 0x04	; 4
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
 6e8:	c6 fb       	bst	r28, 6
 6ea:	44 27       	eor	r20, r20
 6ec:	40 f9       	bld	r20, 0
 6ee:	62 e0       	ldi	r22, 0x02	; 2
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
 6f6:	c5 fb       	bst	r28, 5
 6f8:	44 27       	eor	r20, r20
 6fa:	40 f9       	bld	r20, 0
 6fc:	61 e0       	ldi	r22, 0x01	; 1
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
 704:	c4 fb       	bst	r28, 4
 706:	44 27       	eor	r20, r20
 708:	40 f9       	bld	r20, 0
 70a:	60 e0       	ldi	r22, 0x00	; 0
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
 712:	40 e0       	ldi	r20, 0x00	; 0
 714:	63 e0       	ldi	r22, 0x03	; 3
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
 71c:	41 e0       	ldi	r20, 0x01	; 1
 71e:	62 e0       	ldi	r22, 0x02	; 2
 720:	80 e0       	ldi	r24, 0x00	; 0
 722:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
 726:	85 e0       	ldi	r24, 0x05	; 5
 728:	8a 95       	dec	r24
 72a:	f1 f7       	brne	.-4      	; 0x728 <LCD_Write_Command+0x54>
 72c:	00 00       	nop
 72e:	40 e0       	ldi	r20, 0x00	; 0
 730:	62 e0       	ldi	r22, 0x02	; 2
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
 738:	8f e1       	ldi	r24, 0x1F	; 31
 73a:	93 e0       	ldi	r25, 0x03	; 3
 73c:	01 97       	sbiw	r24, 0x01	; 1
 73e:	f1 f7       	brne	.-4      	; 0x73c <LCD_Write_Command+0x68>
 740:	00 c0       	rjmp	.+0      	; 0x742 <LCD_Write_Command+0x6e>
 742:	00 00       	nop
 744:	c3 fb       	bst	r28, 3
 746:	44 27       	eor	r20, r20
 748:	40 f9       	bld	r20, 0
 74a:	64 e0       	ldi	r22, 0x04	; 4
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
 752:	c2 fb       	bst	r28, 2
 754:	44 27       	eor	r20, r20
 756:	40 f9       	bld	r20, 0
 758:	62 e0       	ldi	r22, 0x02	; 2
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
 760:	c1 fb       	bst	r28, 1
 762:	44 27       	eor	r20, r20
 764:	40 f9       	bld	r20, 0
 766:	61 e0       	ldi	r22, 0x01	; 1
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
 76e:	4c 2f       	mov	r20, r28
 770:	41 70       	andi	r20, 0x01	; 1
 772:	60 e0       	ldi	r22, 0x00	; 0
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
 77a:	41 e0       	ldi	r20, 0x01	; 1
 77c:	62 e0       	ldi	r22, 0x02	; 2
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
 784:	95 e0       	ldi	r25, 0x05	; 5
 786:	9a 95       	dec	r25
 788:	f1 f7       	brne	.-4      	; 0x786 <LCD_Write_Command+0xb2>
 78a:	00 00       	nop
 78c:	40 e0       	ldi	r20, 0x00	; 0
 78e:	62 e0       	ldi	r22, 0x02	; 2
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
 796:	8f e3       	ldi	r24, 0x3F	; 63
 798:	9f e1       	ldi	r25, 0x1F	; 31
 79a:	01 97       	sbiw	r24, 0x01	; 1
 79c:	f1 f7       	brne	.-4      	; 0x79a <LCD_Write_Command+0xc6>
 79e:	00 c0       	rjmp	.+0      	; 0x7a0 <LCD_Write_Command+0xcc>
 7a0:	00 00       	nop
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	cf 91       	pop	r28
 7a6:	08 95       	ret

Disassembly of section .text.LCD_Initialize:

0000099a <LCD_Initialize>:

ERROR_STATE LCD_Initialize(void)
{
	ERROR_STATE state_error = SUCCESS;
	//Define direction for pins
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_D4, LCD_OUT);
 99a:	41 e0       	ldi	r20, 0x01	; 1
 99c:	60 e0       	ldi	r22, 0x00	; 0
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_D5, LCD_OUT);
 9a4:	41 e0       	ldi	r20, 0x01	; 1
 9a6:	61 e0       	ldi	r22, 0x01	; 1
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_D6, LCD_OUT);
 9ae:	41 e0       	ldi	r20, 0x01	; 1
 9b0:	62 e0       	ldi	r22, 0x02	; 2
 9b2:	81 e0       	ldi	r24, 0x01	; 1
 9b4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_D7, LCD_OUT);
 9b8:	41 e0       	ldi	r20, 0x01	; 1
 9ba:	64 e0       	ldi	r22, 0x04	; 4
 9bc:	81 e0       	ldi	r24, 0x01	; 1
 9be:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPin_Direction>
	
	DIO_SetPin_Direction(LCD_CNTRL_PORT, LCD_RS, LCD_OUT);
 9c2:	41 e0       	ldi	r20, 0x01	; 1
 9c4:	63 e0       	ldi	r22, 0x03	; 3
 9c6:	80 e0       	ldi	r24, 0x00	; 0
 9c8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_CNTRL_PORT, LCD_EN, LCD_OUT);
 9cc:	41 e0       	ldi	r20, 0x01	; 1
 9ce:	62 e0       	ldi	r22, 0x02	; 2
 9d0:	80 e0       	ldi	r24, 0x00	; 0
 9d2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPin_Direction>
 9d6:	2f ef       	ldi	r18, 0xFF	; 255
 9d8:	89 ef       	ldi	r24, 0xF9	; 249
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	21 50       	subi	r18, 0x01	; 1
 9de:	80 40       	sbci	r24, 0x00	; 0
 9e0:	90 40       	sbci	r25, 0x00	; 0
 9e2:	e1 f7       	brne	.-8      	; 0x9dc <LCD_Initialize+0x42>
 9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <LCD_Initialize+0x4c>
 9e6:	00 00       	nop
	_delay_ms(20);
	LCD_Write_Command(0x33);
 9e8:	83 e3       	ldi	r24, 0x33	; 51
 9ea:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_Write_Command>
	LCD_Write_Command(0x32);
 9ee:	82 e3       	ldi	r24, 0x32	; 50
 9f0:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_Write_Command>
	LCD_Write_Command(0x28);
 9f4:	88 e2       	ldi	r24, 0x28	; 40
 9f6:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_Write_Command>
	LCD_Write_Command(0x01);
 9fa:	81 e0       	ldi	r24, 0x01	; 1
 9fc:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_Write_Command>
	LCD_Write_Command(0x0C);
 a00:	8c e0       	ldi	r24, 0x0C	; 12
 a02:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_Write_Command>
 a06:	8f e3       	ldi	r24, 0x3F	; 63
 a08:	9c e9       	ldi	r25, 0x9C	; 156
 a0a:	01 97       	sbiw	r24, 0x01	; 1
 a0c:	f1 f7       	brne	.-4      	; 0xa0a <LCD_Initialize+0x70>
 a0e:	00 c0       	rjmp	.+0      	; 0xa10 <LCD_Initialize+0x76>
 a10:	00 00       	nop
	_delay_ms(10);
	return state_error;
}
 a12:	81 e0       	ldi	r24, 0x01	; 1
 a14:	08 95       	ret

Disassembly of section .text.LCD_Write_Character:

000007a8 <LCD_Write_Character>:
	_delay_ms(2);
	return state_error;
}

ERROR_STATE LCD_Write_Character(UINT8_t character)
{
 7a8:	cf 93       	push	r28
 7aa:	c8 2f       	mov	r28, r24
	ERROR_STATE state_error = SUCCESS;
	//Send high nibble first
	//LCD = (LCD & 0x0F) | (character & 0xF0);
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D7,GET_BIT(character,7));
 7ac:	48 2f       	mov	r20, r24
 7ae:	44 1f       	adc	r20, r20
 7b0:	44 27       	eor	r20, r20
 7b2:	44 1f       	adc	r20, r20
 7b4:	64 e0       	ldi	r22, 0x04	; 4
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D6,GET_BIT(character,6));
 7bc:	c6 fb       	bst	r28, 6
 7be:	44 27       	eor	r20, r20
 7c0:	40 f9       	bld	r20, 0
 7c2:	62 e0       	ldi	r22, 0x02	; 2
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D5,GET_BIT(character,5));
 7ca:	c5 fb       	bst	r28, 5
 7cc:	44 27       	eor	r20, r20
 7ce:	40 f9       	bld	r20, 0
 7d0:	61 e0       	ldi	r22, 0x01	; 1
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D4,GET_BIT(character,4));
 7d8:	c4 fb       	bst	r28, 4
 7da:	44 27       	eor	r20, r20
 7dc:	40 f9       	bld	r20, 0
 7de:	60 e0       	ldi	r22, 0x00	; 0
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
	//Register select will select data register
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_RS, LCD_HIGH);
 7e6:	41 e0       	ldi	r20, 0x01	; 1
 7e8:	63 e0       	ldi	r22, 0x03	; 3
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
	//Write on LCD
	
	//Send high to low pulse
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 7f0:	41 e0       	ldi	r20, 0x01	; 1
 7f2:	62 e0       	ldi	r22, 0x02	; 2
 7f4:	80 e0       	ldi	r24, 0x00	; 0
 7f6:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7fa:	85 e0       	ldi	r24, 0x05	; 5
 7fc:	8a 95       	dec	r24
 7fe:	f1 f7       	brne	.-4      	; 0x7fc <LCD_Write_Character+0x54>
 800:	00 00       	nop
	_delay_us(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 802:	40 e0       	ldi	r20, 0x00	; 0
 804:	62 e0       	ldi	r22, 0x02	; 2
 806:	80 e0       	ldi	r24, 0x00	; 0
 808:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
 80c:	8f e1       	ldi	r24, 0x1F	; 31
 80e:	93 e0       	ldi	r25, 0x03	; 3
 810:	01 97       	sbiw	r24, 0x01	; 1
 812:	f1 f7       	brne	.-4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 814:	00 c0       	rjmp	.+0      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 816:	00 00       	nop
	_delay_us(200);
	//Send lower nibble
	//LCD =  (LCD & 0x0F) | (character << 4);
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D7,GET_BIT(character,3));
 818:	c3 fb       	bst	r28, 3
 81a:	44 27       	eor	r20, r20
 81c:	40 f9       	bld	r20, 0
 81e:	64 e0       	ldi	r22, 0x04	; 4
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D6,GET_BIT(character,2));
 826:	c2 fb       	bst	r28, 2
 828:	44 27       	eor	r20, r20
 82a:	40 f9       	bld	r20, 0
 82c:	62 e0       	ldi	r22, 0x02	; 2
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D5,GET_BIT(character,1));
 834:	c1 fb       	bst	r28, 1
 836:	44 27       	eor	r20, r20
 838:	40 f9       	bld	r20, 0
 83a:	61 e0       	ldi	r22, 0x01	; 1
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_DATA_PORT,LCD_D4,GET_BIT(character,0));
 842:	4c 2f       	mov	r20, r28
 844:	41 70       	andi	r20, 0x01	; 1
 846:	60 e0       	ldi	r22, 0x00	; 0
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
	//Send high to low pulse
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 84e:	41 e0       	ldi	r20, 0x01	; 1
 850:	62 e0       	ldi	r22, 0x02	; 2
 852:	80 e0       	ldi	r24, 0x00	; 0
 854:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
 858:	95 e0       	ldi	r25, 0x05	; 5
 85a:	9a 95       	dec	r25
 85c:	f1 f7       	brne	.-4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 85e:	00 00       	nop
	_delay_us(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 860:	40 e0       	ldi	r20, 0x00	; 0
 862:	62 e0       	ldi	r22, 0x02	; 2
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_SetPin_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 86a:	8f e3       	ldi	r24, 0x3F	; 63
 86c:	9f e1       	ldi	r25, 0x1F	; 31
 86e:	01 97       	sbiw	r24, 0x01	; 1
 870:	f1 f7       	brne	.-4      	; 0x86e <__stack+0xf>
 872:	00 c0       	rjmp	.+0      	; 0x874 <__stack+0x15>
 874:	00 00       	nop
	_delay_ms(2);
	return state_error;
}
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	cf 91       	pop	r28
 87a:	08 95       	ret

Disassembly of section .text.LCD_Write_String:

00000ba2 <LCD_Write_String>:

ERROR_STATE LCD_Write_String(const char *str)
{
 ba2:	cf 92       	push	r12
 ba4:	df 92       	push	r13
 ba6:	ef 92       	push	r14
 ba8:	6b 01       	movw	r12, r22
 baa:	e8 2e       	mov	r14, r24
	ERROR_STATE state_error = SUCCESS;
	while (*str != '\0')
 bac:	06 c0       	rjmp	.+12     	; 0xbba <LCD_Write_String+0x18>
	{
		LCD_Write_Character(*str);
 bae:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_Write_Character>
		str++;
 bb2:	8f ef       	ldi	r24, 0xFF	; 255
 bb4:	c8 1a       	sub	r12, r24
 bb6:	d8 0a       	sbc	r13, r24
 bb8:	e8 0a       	sbc	r14, r24
}

ERROR_STATE LCD_Write_String(const char *str)
{
	ERROR_STATE state_error = SUCCESS;
	while (*str != '\0')
 bba:	f6 01       	movw	r30, r12
 bbc:	84 91       	lpm	r24, Z
 bbe:	e7 fc       	sbrc	r14, 7
 bc0:	80 81       	ld	r24, Z
 bc2:	81 11       	cpse	r24, r1
 bc4:	f4 cf       	rjmp	.-24     	; 0xbae <LCD_Write_String+0xc>
	{
		LCD_Write_Character(*str);
		str++;
	}
	return state_error;
}
 bc6:	81 e0       	ldi	r24, 0x01	; 1
 bc8:	ef 90       	pop	r14
 bca:	df 90       	pop	r13
 bcc:	cf 90       	pop	r12
 bce:	08 95       	ret

Disassembly of section .text.LCD_Write_Number:

000000d4 <LCD_Write_Number>:
ERROR_STATE LCD_Clear(void)
{
	ERROR_STATE state_error = SUCCESS;
	LCD_Write_Command(0x01);
	return state_error;
}
  d4:	2f 92       	push	r2
  d6:	3f 92       	push	r3
  d8:	4f 92       	push	r4
  da:	5f 92       	push	r5
  dc:	6f 92       	push	r6
  de:	7f 92       	push	r7
  e0:	8f 92       	push	r8
  e2:	9f 92       	push	r9
  e4:	af 92       	push	r10
  e6:	bf 92       	push	r11
  e8:	cf 92       	push	r12
  ea:	df 92       	push	r13
  ec:	ef 92       	push	r14
  ee:	ff 92       	push	r15
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	6b 97       	sbiw	r28, 0x1b	; 27
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	f8 94       	cli
 102:	de bf       	out	0x3e, r29	; 62
 104:	0f be       	out	0x3f, r0	; 63
 106:	cd bf       	out	0x3d, r28	; 61
 108:	2d 8b       	std	Y+21, r18	; 0x15
 10a:	3e 8b       	std	Y+22, r19	; 0x16
 10c:	94 2e       	mov	r9, r20
 10e:	85 2e       	mov	r8, r21
 110:	6f 8b       	std	Y+23, r22	; 0x17
 112:	78 8f       	std	Y+24, r23	; 0x18
 114:	38 2e       	mov	r3, r24
 116:	29 2e       	mov	r2, r25
 118:	a0 e0       	ldi	r26, 0x00	; 0
 11a:	0e 94 1c 06 	call	0xc38	; 0xc38 <__cmpdi2_s8>
 11e:	ac f4       	brge	.+42     	; 0x14a <LCD_Write_Number+0x76>
 120:	8d e2       	ldi	r24, 0x2D	; 45
 122:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_Write_Character>
 126:	2d 89       	ldd	r18, Y+21	; 0x15
 128:	3e 89       	ldd	r19, Y+22	; 0x16
 12a:	49 2d       	mov	r20, r9
 12c:	58 2d       	mov	r21, r8
 12e:	6f 89       	ldd	r22, Y+23	; 0x17
 130:	78 8d       	ldd	r23, Y+24	; 0x18
 132:	83 2d       	mov	r24, r3
 134:	92 2d       	mov	r25, r2
 136:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__negdi2>
 13a:	2d 8b       	std	Y+21, r18	; 0x15
 13c:	3e 8b       	std	Y+22, r19	; 0x16
 13e:	94 2e       	mov	r9, r20
 140:	85 2e       	mov	r8, r21
 142:	6f 8b       	std	Y+23, r22	; 0x17
 144:	78 8f       	std	Y+24, r23	; 0x18
 146:	38 2e       	mov	r3, r24
 148:	29 2e       	mov	r2, r25
 14a:	ed 89       	ldd	r30, Y+21	; 0x15
 14c:	5e 88       	ldd	r5, Y+22	; 0x16
 14e:	49 2c       	mov	r4, r9
 150:	89 8e       	std	Y+25, r8	; 0x19
 152:	8f 89       	ldd	r24, Y+23	; 0x17
 154:	8a 8f       	std	Y+26, r24	; 0x1a
 156:	88 8d       	ldd	r24, Y+24	; 0x18
 158:	8b 8f       	std	Y+27, r24	; 0x1b
 15a:	b3 2d       	mov	r27, r3
 15c:	f2 2d       	mov	r31, r2
 15e:	61 2c       	mov	r6, r1
 160:	71 2c       	mov	r7, r1
 162:	20 c0       	rjmp	.+64     	; 0x1a4 <LCD_Write_Number+0xd0>
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	68 1a       	sub	r6, r24
 168:	78 0a       	sbc	r7, r24
 16a:	0f 2e       	mov	r0, r31
 16c:	fa e0       	ldi	r31, 0x0A	; 10
 16e:	af 2e       	mov	r10, r31
 170:	f0 2d       	mov	r31, r0
 172:	b1 2c       	mov	r11, r1
 174:	c1 2c       	mov	r12, r1
 176:	d1 2c       	mov	r13, r1
 178:	e1 2c       	mov	r14, r1
 17a:	f1 2c       	mov	r15, r1
 17c:	00 e0       	ldi	r16, 0x00	; 0
 17e:	10 e0       	ldi	r17, 0x00	; 0
 180:	2e 2f       	mov	r18, r30
 182:	35 2d       	mov	r19, r5
 184:	44 2d       	mov	r20, r4
 186:	59 8d       	ldd	r21, Y+25	; 0x19
 188:	6a 8d       	ldd	r22, Y+26	; 0x1a
 18a:	7b 8d       	ldd	r23, Y+27	; 0x1b
 18c:	8b 2f       	mov	r24, r27
 18e:	9f 2f       	mov	r25, r31
 190:	0e 94 47 05 	call	0xa8e	; 0xa8e <__divdi3>
 194:	e2 2f       	mov	r30, r18
 196:	53 2e       	mov	r5, r19
 198:	44 2e       	mov	r4, r20
 19a:	59 8f       	std	Y+25, r21	; 0x19
 19c:	6a 8f       	std	Y+26, r22	; 0x1a
 19e:	7b 8f       	std	Y+27, r23	; 0x1b
 1a0:	b8 2f       	mov	r27, r24
 1a2:	f9 2f       	mov	r31, r25
 1a4:	2e 2f       	mov	r18, r30
 1a6:	35 2d       	mov	r19, r5
 1a8:	44 2d       	mov	r20, r4
 1aa:	59 8d       	ldd	r21, Y+25	; 0x19
 1ac:	6a 8d       	ldd	r22, Y+26	; 0x1a
 1ae:	7b 8d       	ldd	r23, Y+27	; 0x1b
 1b0:	8b 2f       	mov	r24, r27
 1b2:	9f 2f       	mov	r25, r31
 1b4:	a0 e0       	ldi	r26, 0x00	; 0
 1b6:	0e 94 1c 06 	call	0xc38	; 0xc38 <__cmpdi2_s8>
 1ba:	a1 f6       	brne	.-88     	; 0x164 <LCD_Write_Number+0x90>
 1bc:	2d 89       	ldd	r18, Y+21	; 0x15
 1be:	3e 89       	ldd	r19, Y+22	; 0x16
 1c0:	49 2d       	mov	r20, r9
 1c2:	58 2d       	mov	r21, r8
 1c4:	6f 89       	ldd	r22, Y+23	; 0x17
 1c6:	78 8d       	ldd	r23, Y+24	; 0x18
 1c8:	83 2d       	mov	r24, r3
 1ca:	92 2d       	mov	r25, r2
 1cc:	0e 94 1c 06 	call	0xc38	; 0xc38 <__cmpdi2_s8>
 1d0:	21 f4       	brne	.+8      	; 0x1da <LCD_Write_Number+0x106>
 1d2:	80 e3       	ldi	r24, 0x30	; 48
 1d4:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_Write_Character>
 1d8:	4b c0       	rjmp	.+150    	; 0x270 <LCD_Write_Number+0x19c>
 1da:	23 01       	movw	r4, r6
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	48 1a       	sub	r4, r24
 1e0:	51 08       	sbc	r5, r1
 1e2:	32 c0       	rjmp	.+100    	; 0x248 <LCD_Write_Number+0x174>
 1e4:	0f 2e       	mov	r0, r31
 1e6:	fa e0       	ldi	r31, 0x0A	; 10
 1e8:	af 2e       	mov	r10, r31
 1ea:	f0 2d       	mov	r31, r0
 1ec:	b1 2c       	mov	r11, r1
 1ee:	c1 2c       	mov	r12, r1
 1f0:	d1 2c       	mov	r13, r1
 1f2:	e1 2c       	mov	r14, r1
 1f4:	f1 2c       	mov	r15, r1
 1f6:	00 e0       	ldi	r16, 0x00	; 0
 1f8:	10 e0       	ldi	r17, 0x00	; 0
 1fa:	2d 89       	ldd	r18, Y+21	; 0x15
 1fc:	3e 89       	ldd	r19, Y+22	; 0x16
 1fe:	49 2d       	mov	r20, r9
 200:	58 2d       	mov	r21, r8
 202:	6f 89       	ldd	r22, Y+23	; 0x17
 204:	78 8d       	ldd	r23, Y+24	; 0x18
 206:	83 2d       	mov	r24, r3
 208:	92 2d       	mov	r25, r2
 20a:	0e 94 45 05 	call	0xa8a	; 0xa8a <__moddi3>
 20e:	e1 e0       	ldi	r30, 0x01	; 1
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	ec 0f       	add	r30, r28
 214:	fd 1f       	adc	r31, r29
 216:	e4 0d       	add	r30, r4
 218:	f5 1d       	adc	r31, r5
 21a:	20 5d       	subi	r18, 0xD0	; 208
 21c:	20 83       	st	Z, r18
 21e:	2d 89       	ldd	r18, Y+21	; 0x15
 220:	3e 89       	ldd	r19, Y+22	; 0x16
 222:	49 2d       	mov	r20, r9
 224:	58 2d       	mov	r21, r8
 226:	6f 89       	ldd	r22, Y+23	; 0x17
 228:	78 8d       	ldd	r23, Y+24	; 0x18
 22a:	83 2d       	mov	r24, r3
 22c:	92 2d       	mov	r25, r2
 22e:	0e 94 47 05 	call	0xa8e	; 0xa8e <__divdi3>
 232:	2d 8b       	std	Y+21, r18	; 0x15
 234:	3e 8b       	std	Y+22, r19	; 0x16
 236:	94 2e       	mov	r9, r20
 238:	85 2e       	mov	r8, r21
 23a:	6f 8b       	std	Y+23, r22	; 0x17
 23c:	78 8f       	std	Y+24, r23	; 0x18
 23e:	38 2e       	mov	r3, r24
 240:	29 2e       	mov	r2, r25
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	48 1a       	sub	r4, r24
 246:	51 08       	sbc	r5, r1
 248:	55 20       	and	r5, r5
 24a:	64 f6       	brge	.-104    	; 0x1e4 <LCD_Write_Number+0x110>
 24c:	81 2c       	mov	r8, r1
 24e:	91 2c       	mov	r9, r1
 250:	0c c0       	rjmp	.+24     	; 0x26a <LCD_Write_Number+0x196>
 252:	e1 e0       	ldi	r30, 0x01	; 1
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	ec 0f       	add	r30, r28
 258:	fd 1f       	adc	r31, r29
 25a:	e8 0d       	add	r30, r8
 25c:	f9 1d       	adc	r31, r9
 25e:	80 81       	ld	r24, Z
 260:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_Write_Character>
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	88 1a       	sub	r8, r24
 268:	98 0a       	sbc	r9, r24
 26a:	86 14       	cp	r8, r6
 26c:	97 04       	cpc	r9, r7
 26e:	88 f3       	brcs	.-30     	; 0x252 <LCD_Write_Number+0x17e>
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	6b 96       	adiw	r28, 0x1b	; 27
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	ff 90       	pop	r15
 288:	ef 90       	pop	r14
 28a:	df 90       	pop	r13
 28c:	cf 90       	pop	r12
 28e:	bf 90       	pop	r11
 290:	af 90       	pop	r10
 292:	9f 90       	pop	r9
 294:	8f 90       	pop	r8
 296:	7f 90       	pop	r7
 298:	6f 90       	pop	r6
 29a:	5f 90       	pop	r5
 29c:	4f 90       	pop	r4
 29e:	3f 90       	pop	r3
 2a0:	2f 90       	pop	r2
 2a2:	08 95       	ret

Disassembly of section .text.LCD_LINE_position:

00000aec <LCD_LINE_position>:
Inputs:	row and column
Output:	state
Description: Moves the cursor position to the provided
row and column.
*/
ERROR_STATE LCD_LINE_position(LCD_LINES row , SINT8_t column){
 aec:	cf 93       	push	r28
	ERROR_STATE state_error = SUCCESS;
	UINT8_t address = 0;
	
	if(column < 20 && column >= 0){
 aee:	64 31       	cpi	r22, 0x14	; 20
 af0:	e8 f4       	brcc	.+58     	; 0xb2c <LCD_LINE_position+0x40>
		switch(row){
 af2:	81 30       	cpi	r24, 0x01	; 1
 af4:	91 f0       	breq	.+36     	; 0xb1a <LCD_LINE_position+0x2e>
 af6:	28 f0       	brcs	.+10     	; 0xb02 <LCD_LINE_position+0x16>
 af8:	82 30       	cpi	r24, 0x02	; 2
 afa:	31 f0       	breq	.+12     	; 0xb08 <LCD_LINE_position+0x1c>
 afc:	83 30       	cpi	r24, 0x03	; 3
 afe:	39 f0       	breq	.+14     	; 0xb0e <LCD_LINE_position+0x22>
 b00:	09 c0       	rjmp	.+18     	; 0xb14 <LCD_LINE_position+0x28>
			case LCD_LINE1:
			address = 0x00;
 b02:	80 e0       	ldi	r24, 0x00	; 0
Output:	state
Description: Moves the cursor position to the provided
row and column.
*/
ERROR_STATE LCD_LINE_position(LCD_LINES row , SINT8_t column){
	ERROR_STATE state_error = SUCCESS;
 b04:	c1 e0       	ldi	r28, 0x01	; 1
 b06:	0b c0       	rjmp	.+22     	; 0xb1e <LCD_LINE_position+0x32>
			break;
			case LCD_LINE2:
			address = 0x40;
			break;
			case LCD_LINE3:
			address = 0x14;
 b08:	84 e1       	ldi	r24, 0x14	; 20
Output:	state
Description: Moves the cursor position to the provided
row and column.
*/
ERROR_STATE LCD_LINE_position(LCD_LINES row , SINT8_t column){
	ERROR_STATE state_error = SUCCESS;
 b0a:	c1 e0       	ldi	r28, 0x01	; 1
			case LCD_LINE2:
			address = 0x40;
			break;
			case LCD_LINE3:
			address = 0x14;
			break;
 b0c:	08 c0       	rjmp	.+16     	; 0xb1e <LCD_LINE_position+0x32>
			case LCD_LINE4:
			address = 0x54;
 b0e:	84 e5       	ldi	r24, 0x54	; 84
Output:	state
Description: Moves the cursor position to the provided
row and column.
*/
ERROR_STATE LCD_LINE_position(LCD_LINES row , SINT8_t column){
	ERROR_STATE state_error = SUCCESS;
 b10:	c1 e0       	ldi	r28, 0x01	; 1
			case LCD_LINE3:
			address = 0x14;
			break;
			case LCD_LINE4:
			address = 0x54;
			break;
 b12:	05 c0       	rjmp	.+10     	; 0xb1e <LCD_LINE_position+0x32>
Description: Moves the cursor position to the provided
row and column.
*/
ERROR_STATE LCD_LINE_position(LCD_LINES row , SINT8_t column){
	ERROR_STATE state_error = SUCCESS;
	UINT8_t address = 0;
 b14:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case LCD_LINE4:
			address = 0x54;
			break;
			default:
			state_error = FAIL;
 b16:	c0 e0       	ldi	r28, 0x00	; 0
			break;
 b18:	02 c0       	rjmp	.+4      	; 0xb1e <LCD_LINE_position+0x32>
		switch(row){
			case LCD_LINE1:
			address = 0x00;
			break;
			case LCD_LINE2:
			address = 0x40;
 b1a:	80 e4       	ldi	r24, 0x40	; 64
Output:	state
Description: Moves the cursor position to the provided
row and column.
*/
ERROR_STATE LCD_LINE_position(LCD_LINES row , SINT8_t column){
	ERROR_STATE state_error = SUCCESS;
 b1c:	c1 e0       	ldi	r28, 0x01	; 1
			break;
			default:
			state_error = FAIL;
			break;
		}
		if(SUCCESS == state_error){
 b1e:	c1 30       	cpi	r28, 0x01	; 1
 b20:	31 f4       	brne	.+12     	; 0xb2e <LCD_LINE_position+0x42>
			address += column;
 b22:	86 0f       	add	r24, r22
			LCD_Write_Command(0x80+address);
 b24:	80 58       	subi	r24, 0x80	; 128
 b26:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_Write_Command>
 b2a:	01 c0       	rjmp	.+2      	; 0xb2e <LCD_LINE_position+0x42>
			}else{
			;
		}
		}else{
		state_error = FAIL;
 b2c:	c0 e0       	ldi	r28, 0x00	; 0
	}

	return state_error;
 b2e:	8c 2f       	mov	r24, r28
 b30:	cf 91       	pop	r28
 b32:	08 95       	ret

Disassembly of section .text.main:

00000c7c <main>:

#include "main.h"


int main() {
App_Init();
 c7c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <App_Init>
while(1){
App_main();
 c80:	0e 94 33 06 	call	0xc66	; 0xc66 <App_main>
 c84:	fd cf       	rjmp	.-6      	; 0xc80 <main+0x4>

Disassembly of section .text.DIO_SetPin_Direction:

000003f0 <DIO_SetPin_Direction>:
 3f0:	44 23       	and	r20, r20
 3f2:	19 f0       	breq	.+6      	; 0x3fa <DIO_SetPin_Direction+0xa>
 3f4:	41 30       	cpi	r20, 0x01	; 1
 3f6:	e9 f1       	breq	.+122    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 3f8:	74 c0       	rjmp	.+232    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	99 f0       	breq	.+38     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3fe:	28 f0       	brcs	.+10     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 400:	82 30       	cpi	r24, 0x02	; 2
 402:	e9 f0       	breq	.+58     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 404:	83 30       	cpi	r24, 0x03	; 3
 406:	41 f1       	breq	.+80     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 408:	6e c0       	rjmp	.+220    	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 40a:	2a b3       	in	r18, 0x1a	; 26
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	6a 95       	dec	r22
 418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	80 95       	com	r24
 41c:	82 23       	and	r24, r18
 41e:	8a bb       	out	0x1a, r24	; 26
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	08 95       	ret
 424:	27 b3       	in	r18, 0x17	; 23
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 434:	80 95       	com	r24
 436:	82 23       	and	r24, r18
 438:	87 bb       	out	0x17, r24	; 23
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	08 95       	ret
 43e:	24 b3       	in	r18, 0x14	; 20
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	02 c0       	rjmp	.+4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	6a 95       	dec	r22
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44e:	80 95       	com	r24
 450:	82 23       	and	r24, r18
 452:	84 bb       	out	0x14, r24	; 20
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	08 95       	ret
 458:	21 b3       	in	r18, 0x11	; 17
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 468:	80 95       	com	r24
 46a:	82 23       	and	r24, r18
 46c:	81 bb       	out	0x11, r24	; 17
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	08 95       	ret
 472:	81 30       	cpi	r24, 0x01	; 1
 474:	91 f0       	breq	.+36     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 476:	28 f0       	brcs	.+10     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 478:	82 30       	cpi	r24, 0x02	; 2
 47a:	d9 f0       	breq	.+54     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 47c:	83 30       	cpi	r24, 0x03	; 3
 47e:	29 f1       	breq	.+74     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 480:	34 c0       	rjmp	.+104    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 482:	2a b3       	in	r18, 0x1a	; 26
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	02 c0       	rjmp	.+4      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 48a:	88 0f       	add	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	6a 95       	dec	r22
 490:	e2 f7       	brpl	.-8      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 492:	82 2b       	or	r24, r18
 494:	8a bb       	out	0x1a, r24	; 26
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	08 95       	ret
 49a:	27 b3       	in	r18, 0x17	; 23
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	6a 95       	dec	r22
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4aa:	82 2b       	or	r24, r18
 4ac:	87 bb       	out	0x17, r24	; 23
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	08 95       	ret
 4b2:	24 b3       	in	r18, 0x14	; 20
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	6a 95       	dec	r22
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4c2:	82 2b       	or	r24, r18
 4c4:	84 bb       	out	0x14, r24	; 20
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	08 95       	ret
 4ca:	21 b3       	in	r18, 0x11	; 17
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	6a 95       	dec	r22
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4da:	82 2b       	or	r24, r18
 4dc:	81 bb       	out	0x11, r24	; 17
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	08 95       	ret
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	08 95       	ret
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	08 95       	ret
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	08 95       	ret

Disassembly of section .text.DIO_SetPin_Value:

000004ee <DIO_SetPin_Value>:
 4ee:	44 23       	and	r20, r20
 4f0:	19 f0       	breq	.+6      	; 0x4f8 <DIO_SetPin_Value+0xa>
 4f2:	41 30       	cpi	r20, 0x01	; 1
 4f4:	e9 f1       	breq	.+122    	; 0x570 <DIO_SetPin_Value+0x82>
 4f6:	74 c0       	rjmp	.+232    	; 0x5e0 <DIO_SetPin_Value+0xf2>
 4f8:	81 30       	cpi	r24, 0x01	; 1
 4fa:	99 f0       	breq	.+38     	; 0x522 <DIO_SetPin_Value+0x34>
 4fc:	28 f0       	brcs	.+10     	; 0x508 <DIO_SetPin_Value+0x1a>
 4fe:	82 30       	cpi	r24, 0x02	; 2
 500:	e9 f0       	breq	.+58     	; 0x53c <DIO_SetPin_Value+0x4e>
 502:	83 30       	cpi	r24, 0x03	; 3
 504:	41 f1       	breq	.+80     	; 0x556 <DIO_SetPin_Value+0x68>
 506:	6e c0       	rjmp	.+220    	; 0x5e4 <DIO_SetPin_Value+0xf6>
 508:	2b b3       	in	r18, 0x1b	; 27
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_SetPin_Value+0x26>
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	6a 95       	dec	r22
 516:	e2 f7       	brpl	.-8      	; 0x510 <DIO_SetPin_Value+0x22>
 518:	80 95       	com	r24
 51a:	82 23       	and	r24, r18
 51c:	8b bb       	out	0x1b, r24	; 27
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	08 95       	ret
 522:	28 b3       	in	r18, 0x18	; 24
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_SetPin_Value+0x40>
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	6a 95       	dec	r22
 530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_SetPin_Value+0x3c>
 532:	80 95       	com	r24
 534:	82 23       	and	r24, r18
 536:	88 bb       	out	0x18, r24	; 24
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	08 95       	ret
 53c:	25 b3       	in	r18, 0x15	; 21
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_SetPin_Value+0x5a>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	6a 95       	dec	r22
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_SetPin_Value+0x56>
 54c:	80 95       	com	r24
 54e:	82 23       	and	r24, r18
 550:	85 bb       	out	0x15, r24	; 21
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	08 95       	ret
 556:	22 b3       	in	r18, 0x12	; 18
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_SetPin_Value+0x74>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	6a 95       	dec	r22
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_SetPin_Value+0x70>
 566:	80 95       	com	r24
 568:	82 23       	and	r24, r18
 56a:	82 bb       	out	0x12, r24	; 18
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	08 95       	ret
 570:	81 30       	cpi	r24, 0x01	; 1
 572:	91 f0       	breq	.+36     	; 0x598 <DIO_SetPin_Value+0xaa>
 574:	28 f0       	brcs	.+10     	; 0x580 <DIO_SetPin_Value+0x92>
 576:	82 30       	cpi	r24, 0x02	; 2
 578:	d9 f0       	breq	.+54     	; 0x5b0 <DIO_SetPin_Value+0xc2>
 57a:	83 30       	cpi	r24, 0x03	; 3
 57c:	29 f1       	breq	.+74     	; 0x5c8 <DIO_SetPin_Value+0xda>
 57e:	34 c0       	rjmp	.+104    	; 0x5e8 <DIO_SetPin_Value+0xfa>
 580:	2b b3       	in	r18, 0x1b	; 27
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_SetPin_Value+0x9e>
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	6a 95       	dec	r22
 58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_SetPin_Value+0x9a>
 590:	82 2b       	or	r24, r18
 592:	8b bb       	out	0x1b, r24	; 27
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	08 95       	ret
 598:	28 b3       	in	r18, 0x18	; 24
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_SetPin_Value+0xb6>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	6a 95       	dec	r22
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <DIO_SetPin_Value+0xb2>
 5a8:	82 2b       	or	r24, r18
 5aa:	88 bb       	out	0x18, r24	; 24
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	08 95       	ret
 5b0:	25 b3       	in	r18, 0x15	; 21
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_SetPin_Value+0xce>
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	6a 95       	dec	r22
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_SetPin_Value+0xca>
 5c0:	82 2b       	or	r24, r18
 5c2:	85 bb       	out	0x15, r24	; 21
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	08 95       	ret
 5c8:	22 b3       	in	r18, 0x12	; 18
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <DIO_SetPin_Value+0xe6>
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	6a 95       	dec	r22
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <DIO_SetPin_Value+0xe2>
 5d8:	82 2b       	or	r24, r18
 5da:	82 bb       	out	0x12, r24	; 18
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	08 95       	ret
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	08 95       	ret
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	08 95       	ret
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	08 95       	ret

Disassembly of section .text.DIO_GetPin_Value:

00000a16 <DIO_GetPin_Value>:
 a16:	81 30       	cpi	r24, 0x01	; 1
 a18:	91 f0       	breq	.+36     	; 0xa3e <DIO_GetPin_Value+0x28>
 a1a:	28 f0       	brcs	.+10     	; 0xa26 <DIO_GetPin_Value+0x10>
 a1c:	82 30       	cpi	r24, 0x02	; 2
 a1e:	d9 f0       	breq	.+54     	; 0xa56 <DIO_GetPin_Value+0x40>
 a20:	83 30       	cpi	r24, 0x03	; 3
 a22:	29 f1       	breq	.+74     	; 0xa6e <DIO_GetPin_Value+0x58>
 a24:	30 c0       	rjmp	.+96     	; 0xa86 <DIO_GetPin_Value+0x70>
 a26:	89 b3       	in	r24, 0x19	; 25
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	02 c0       	rjmp	.+4      	; 0xa30 <DIO_GetPin_Value+0x1a>
 a2c:	95 95       	asr	r25
 a2e:	87 95       	ror	r24
 a30:	6a 95       	dec	r22
 a32:	e2 f7       	brpl	.-8      	; 0xa2c <DIO_GetPin_Value+0x16>
 a34:	81 70       	andi	r24, 0x01	; 1
 a36:	fa 01       	movw	r30, r20
 a38:	80 83       	st	Z, r24
 a3a:	81 e0       	ldi	r24, 0x01	; 1
 a3c:	08 95       	ret
 a3e:	86 b3       	in	r24, 0x16	; 22
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	02 c0       	rjmp	.+4      	; 0xa48 <DIO_GetPin_Value+0x32>
 a44:	95 95       	asr	r25
 a46:	87 95       	ror	r24
 a48:	6a 95       	dec	r22
 a4a:	e2 f7       	brpl	.-8      	; 0xa44 <DIO_GetPin_Value+0x2e>
 a4c:	81 70       	andi	r24, 0x01	; 1
 a4e:	fa 01       	movw	r30, r20
 a50:	80 83       	st	Z, r24
 a52:	81 e0       	ldi	r24, 0x01	; 1
 a54:	08 95       	ret
 a56:	83 b3       	in	r24, 0x13	; 19
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	02 c0       	rjmp	.+4      	; 0xa60 <DIO_GetPin_Value+0x4a>
 a5c:	95 95       	asr	r25
 a5e:	87 95       	ror	r24
 a60:	6a 95       	dec	r22
 a62:	e2 f7       	brpl	.-8      	; 0xa5c <DIO_GetPin_Value+0x46>
 a64:	81 70       	andi	r24, 0x01	; 1
 a66:	fa 01       	movw	r30, r20
 a68:	80 83       	st	Z, r24
 a6a:	81 e0       	ldi	r24, 0x01	; 1
 a6c:	08 95       	ret
 a6e:	80 b3       	in	r24, 0x10	; 16
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	02 c0       	rjmp	.+4      	; 0xa78 <DIO_GetPin_Value+0x62>
 a74:	95 95       	asr	r25
 a76:	87 95       	ror	r24
 a78:	6a 95       	dec	r22
 a7a:	e2 f7       	brpl	.-8      	; 0xa74 <DIO_GetPin_Value+0x5e>
 a7c:	81 70       	andi	r24, 0x01	; 1
 a7e:	fa 01       	movw	r30, r20
 a80:	80 83       	st	Z, r24
 a82:	81 e0       	ldi	r24, 0x01	; 1
 a84:	08 95       	ret
 a86:	80 e0       	ldi	r24, 0x00	; 0
 a88:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000a8a <__moddi3>:
 a8a:	68 94       	set
 a8c:	01 c0       	rjmp	.+2      	; 0xa90 <__divdi3_moddi3>

00000a8e <__divdi3>:
 a8e:	e8 94       	clt

00000a90 <__divdi3_moddi3>:
 a90:	f9 2f       	mov	r31, r25
 a92:	f1 2b       	or	r31, r17
 a94:	12 f0       	brmi	.+4      	; 0xa9a <__divdi3_moddi3+0xa>
 a96:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__udivdi3_umoddi3>
 a9a:	a0 e0       	ldi	r26, 0x00	; 0
 a9c:	b0 e0       	ldi	r27, 0x00	; 0
 a9e:	e3 e5       	ldi	r30, 0x53	; 83
 aa0:	f5 e0       	ldi	r31, 0x05	; 5
 aa2:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <__prologue_saves__+0xc>
 aa6:	09 2e       	mov	r0, r25
 aa8:	05 94       	asr	r0
 aaa:	22 f4       	brpl	.+8      	; 0xab4 <__divdi3_moddi3+0x24>
 aac:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__negdi2>
 ab0:	11 23       	and	r17, r17
 ab2:	92 f4       	brpl	.+36     	; 0xad8 <__divdi3_moddi3+0x48>
 ab4:	f0 e8       	ldi	r31, 0x80	; 128
 ab6:	0f 26       	eor	r0, r31
 ab8:	ff ef       	ldi	r31, 0xFF	; 255
 aba:	e0 94       	com	r14
 abc:	f0 94       	com	r15
 abe:	00 95       	com	r16
 ac0:	10 95       	com	r17
 ac2:	b0 94       	com	r11
 ac4:	c0 94       	com	r12
 ac6:	d0 94       	com	r13
 ac8:	a1 94       	neg	r10
 aca:	bf 0a       	sbc	r11, r31
 acc:	cf 0a       	sbc	r12, r31
 ace:	df 0a       	sbc	r13, r31
 ad0:	ef 0a       	sbc	r14, r31
 ad2:	ff 0a       	sbc	r15, r31
 ad4:	0f 0b       	sbc	r16, r31
 ad6:	1f 0b       	sbc	r17, r31
 ad8:	0e 94 3e 04 	call	0x87c	; 0x87c <__udivmod64>
 adc:	07 fc       	sbrc	r0, 7
 ade:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__negdi2>
 ae2:	cd b7       	in	r28, 0x3d	; 61
 ae4:	de b7       	in	r29, 0x3e	; 62
 ae6:	ec e0       	ldi	r30, 0x0C	; 12
 ae8:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__epilogue_restores__+0xc>

Disassembly of section .text.libgcc.div:

00000c1c <__umoddi3>:
 c1c:	68 94       	set
 c1e:	01 c0       	rjmp	.+2      	; 0xc22 <__udivdi3_umoddi3>

00000c20 <__udivdi3>:
 c20:	e8 94       	clt

00000c22 <__udivdi3_umoddi3>:
 c22:	8f 92       	push	r8
 c24:	9f 92       	push	r9
 c26:	cf 93       	push	r28
 c28:	df 93       	push	r29
 c2a:	0e 94 3e 04 	call	0x87c	; 0x87c <__udivmod64>
 c2e:	df 91       	pop	r29
 c30:	cf 91       	pop	r28
 c32:	9f 90       	pop	r9
 c34:	8f 90       	pop	r8
 c36:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000087c <__udivmod64>:
 87c:	88 24       	eor	r8, r8
 87e:	99 24       	eor	r9, r9
 880:	f4 01       	movw	r30, r8
 882:	e4 01       	movw	r28, r8
 884:	b0 e4       	ldi	r27, 0x40	; 64
 886:	9f 93       	push	r25
 888:	aa 27       	eor	r26, r26
 88a:	9a 15       	cp	r25, r10
 88c:	8b 04       	cpc	r8, r11
 88e:	9c 04       	cpc	r9, r12
 890:	ed 05       	cpc	r30, r13
 892:	fe 05       	cpc	r31, r14
 894:	cf 05       	cpc	r28, r15
 896:	d0 07       	cpc	r29, r16
 898:	a1 07       	cpc	r26, r17
 89a:	98 f4       	brcc	.+38     	; 0x8c2 <__udivmod64+0x46>
 89c:	ad 2f       	mov	r26, r29
 89e:	dc 2f       	mov	r29, r28
 8a0:	cf 2f       	mov	r28, r31
 8a2:	fe 2f       	mov	r31, r30
 8a4:	e9 2d       	mov	r30, r9
 8a6:	98 2c       	mov	r9, r8
 8a8:	89 2e       	mov	r8, r25
 8aa:	98 2f       	mov	r25, r24
 8ac:	87 2f       	mov	r24, r23
 8ae:	76 2f       	mov	r23, r22
 8b0:	65 2f       	mov	r22, r21
 8b2:	54 2f       	mov	r21, r20
 8b4:	43 2f       	mov	r20, r19
 8b6:	32 2f       	mov	r19, r18
 8b8:	22 27       	eor	r18, r18
 8ba:	b8 50       	subi	r27, 0x08	; 8
 8bc:	31 f7       	brne	.-52     	; 0x88a <__udivmod64+0xe>
 8be:	bf 91       	pop	r27
 8c0:	27 c0       	rjmp	.+78     	; 0x910 <__udivmod64+0x94>
 8c2:	1b 2e       	mov	r1, r27
 8c4:	bf 91       	pop	r27
 8c6:	bb 27       	eor	r27, r27
 8c8:	22 0f       	add	r18, r18
 8ca:	33 1f       	adc	r19, r19
 8cc:	44 1f       	adc	r20, r20
 8ce:	55 1f       	adc	r21, r21
 8d0:	66 1f       	adc	r22, r22
 8d2:	77 1f       	adc	r23, r23
 8d4:	88 1f       	adc	r24, r24
 8d6:	99 1f       	adc	r25, r25
 8d8:	88 1c       	adc	r8, r8
 8da:	99 1c       	adc	r9, r9
 8dc:	ee 1f       	adc	r30, r30
 8de:	ff 1f       	adc	r31, r31
 8e0:	cc 1f       	adc	r28, r28
 8e2:	dd 1f       	adc	r29, r29
 8e4:	aa 1f       	adc	r26, r26
 8e6:	bb 1f       	adc	r27, r27
 8e8:	8a 14       	cp	r8, r10
 8ea:	9b 04       	cpc	r9, r11
 8ec:	ec 05       	cpc	r30, r12
 8ee:	fd 05       	cpc	r31, r13
 8f0:	ce 05       	cpc	r28, r14
 8f2:	df 05       	cpc	r29, r15
 8f4:	a0 07       	cpc	r26, r16
 8f6:	b1 07       	cpc	r27, r17
 8f8:	48 f0       	brcs	.+18     	; 0x90c <__udivmod64+0x90>
 8fa:	8a 18       	sub	r8, r10
 8fc:	9b 08       	sbc	r9, r11
 8fe:	ec 09       	sbc	r30, r12
 900:	fd 09       	sbc	r31, r13
 902:	ce 09       	sbc	r28, r14
 904:	df 09       	sbc	r29, r15
 906:	a0 0b       	sbc	r26, r16
 908:	b1 0b       	sbc	r27, r17
 90a:	21 60       	ori	r18, 0x01	; 1
 90c:	1a 94       	dec	r1
 90e:	e1 f6       	brne	.-72     	; 0x8c8 <__udivmod64+0x4c>
 910:	2e f4       	brtc	.+10     	; 0x91c <__udivmod64+0xa0>
 912:	94 01       	movw	r18, r8
 914:	af 01       	movw	r20, r30
 916:	be 01       	movw	r22, r28
 918:	cd 01       	movw	r24, r26
 91a:	00 0c       	add	r0, r0
 91c:	08 95       	ret

Disassembly of section .text.libgcc:

00000bfc <__negdi2>:
 bfc:	60 95       	com	r22
 bfe:	70 95       	com	r23
 c00:	80 95       	com	r24
 c02:	90 95       	com	r25
 c04:	30 95       	com	r19
 c06:	40 95       	com	r20
 c08:	50 95       	com	r21
 c0a:	21 95       	neg	r18
 c0c:	3f 4f       	sbci	r19, 0xFF	; 255
 c0e:	4f 4f       	sbci	r20, 0xFF	; 255
 c10:	5f 4f       	sbci	r21, 0xFF	; 255
 c12:	6f 4f       	sbci	r22, 0xFF	; 255
 c14:	7f 4f       	sbci	r23, 0xFF	; 255
 c16:	8f 4f       	sbci	r24, 0xFF	; 255
 c18:	9f 4f       	sbci	r25, 0xFF	; 255
 c1a:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00000b34 <__prologue_saves__>:
 b34:	2f 92       	push	r2
 b36:	3f 92       	push	r3
 b38:	4f 92       	push	r4
 b3a:	5f 92       	push	r5
 b3c:	6f 92       	push	r6
 b3e:	7f 92       	push	r7
 b40:	8f 92       	push	r8
 b42:	9f 92       	push	r9
 b44:	af 92       	push	r10
 b46:	bf 92       	push	r11
 b48:	cf 92       	push	r12
 b4a:	df 92       	push	r13
 b4c:	ef 92       	push	r14
 b4e:	ff 92       	push	r15
 b50:	0f 93       	push	r16
 b52:	1f 93       	push	r17
 b54:	cf 93       	push	r28
 b56:	df 93       	push	r29
 b58:	cd b7       	in	r28, 0x3d	; 61
 b5a:	de b7       	in	r29, 0x3e	; 62
 b5c:	ca 1b       	sub	r28, r26
 b5e:	db 0b       	sbc	r29, r27
 b60:	0f b6       	in	r0, 0x3f	; 63
 b62:	f8 94       	cli
 b64:	de bf       	out	0x3e, r29	; 62
 b66:	0f be       	out	0x3f, r0	; 63
 b68:	cd bf       	out	0x3d, r28	; 61
 b6a:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00000b6c <__epilogue_restores__>:
 b6c:	2a 88       	ldd	r2, Y+18	; 0x12
 b6e:	39 88       	ldd	r3, Y+17	; 0x11
 b70:	48 88       	ldd	r4, Y+16	; 0x10
 b72:	5f 84       	ldd	r5, Y+15	; 0x0f
 b74:	6e 84       	ldd	r6, Y+14	; 0x0e
 b76:	7d 84       	ldd	r7, Y+13	; 0x0d
 b78:	8c 84       	ldd	r8, Y+12	; 0x0c
 b7a:	9b 84       	ldd	r9, Y+11	; 0x0b
 b7c:	aa 84       	ldd	r10, Y+10	; 0x0a
 b7e:	b9 84       	ldd	r11, Y+9	; 0x09
 b80:	c8 84       	ldd	r12, Y+8	; 0x08
 b82:	df 80       	ldd	r13, Y+7	; 0x07
 b84:	ee 80       	ldd	r14, Y+6	; 0x06
 b86:	fd 80       	ldd	r15, Y+5	; 0x05
 b88:	0c 81       	ldd	r16, Y+4	; 0x04
 b8a:	1b 81       	ldd	r17, Y+3	; 0x03
 b8c:	aa 81       	ldd	r26, Y+2	; 0x02
 b8e:	b9 81       	ldd	r27, Y+1	; 0x01
 b90:	ce 0f       	add	r28, r30
 b92:	d1 1d       	adc	r29, r1
 b94:	0f b6       	in	r0, 0x3f	; 63
 b96:	f8 94       	cli
 b98:	de bf       	out	0x3e, r29	; 62
 b9a:	0f be       	out	0x3f, r0	; 63
 b9c:	cd bf       	out	0x3d, r28	; 61
 b9e:	ed 01       	movw	r28, r26
 ba0:	08 95       	ret

Disassembly of section .text.libgcc:

00000c38 <__cmpdi2_s8>:
 c38:	00 24       	eor	r0, r0
 c3a:	a7 fd       	sbrc	r26, 7
 c3c:	00 94       	com	r0
 c3e:	2a 17       	cp	r18, r26
 c40:	30 05       	cpc	r19, r0
 c42:	40 05       	cpc	r20, r0
 c44:	50 05       	cpc	r21, r0
 c46:	60 05       	cpc	r22, r0
 c48:	70 05       	cpc	r23, r0
 c4a:	80 05       	cpc	r24, r0
 c4c:	90 05       	cpc	r25, r0
 c4e:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000c8e <_fini>:
 c8e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000c90 <__funcs_on_exit>:
 c90:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000c92 <__simulator_exit>:
 c92:	08 95       	ret

Disassembly of section .text.exit:

00000c50 <exit>:
 c50:	ec 01       	movw	r28, r24
 c52:	0e 94 48 06 	call	0xc90	; 0xc90 <__funcs_on_exit>
 c56:	0e 94 47 06 	call	0xc8e	; 0xc8e <_fini>
 c5a:	ce 01       	movw	r24, r28
 c5c:	0e 94 49 06 	call	0xc92	; 0xc92 <__simulator_exit>
 c60:	ce 01       	movw	r24, r28
 c62:	0e 94 45 06 	call	0xc8a	; 0xc8a <_Exit>

Disassembly of section .text._Exit:

00000c8a <_Exit>:
 c8a:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
